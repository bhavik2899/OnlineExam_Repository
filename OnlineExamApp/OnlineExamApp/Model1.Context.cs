//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineExamApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineExamEntities : DbContext
    {
        public OnlineExamEntities()
            : base("name=OnlineExamEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PaperMaster> PaperMasters { get; set; }
        public virtual DbSet<PaperQueMaster> PaperQueMasters { get; set; }
        public virtual DbSet<QueMaster> QueMasters { get; set; }
        public virtual DbSet<QueOptionMaster> QueOptionMasters { get; set; }
        public virtual DbSet<TestConductAn> TestConductAns { get; set; }
        public virtual DbSet<TestConductMaster> TestConductMasters { get; set; }
        public virtual DbSet<FeeHead> FeeHeads { get; set; }
        public virtual DbSet<FeeStructur> FeeStructurs { get; set; }
        public virtual DbSet<FeeStructurHead> FeeStructurHeads { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentFeeCollection> StudentFeeCollections { get; set; }
        public virtual DbSet<StudentFeeCollectionHead> StudentFeeCollectionHeads { get; set; }
        public virtual DbSet<StudentFeeSchedule> StudentFeeSchedules { get; set; }
    
        public virtual int sp_InsertUpdatePaper(Nullable<long> paperId, string title, string details, Nullable<System.DateTime> examDate, Nullable<System.TimeSpan> startDate, Nullable<System.TimeSpan> endDate, Nullable<int> totalMarks, Nullable<int> passingMarks, string questions)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("details", details) :
                new ObjectParameter("details", typeof(string));
    
            var examDateParameter = examDate.HasValue ?
                new ObjectParameter("examDate", examDate) :
                new ObjectParameter("examDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.TimeSpan));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.TimeSpan));
    
            var totalMarksParameter = totalMarks.HasValue ?
                new ObjectParameter("totalMarks", totalMarks) :
                new ObjectParameter("totalMarks", typeof(int));
    
            var passingMarksParameter = passingMarks.HasValue ?
                new ObjectParameter("passingMarks", passingMarks) :
                new ObjectParameter("passingMarks", typeof(int));
    
            var questionsParameter = questions != null ?
                new ObjectParameter("questions", questions) :
                new ObjectParameter("questions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdatePaper", paperIdParameter, titleParameter, detailsParameter, examDateParameter, startDateParameter, endDateParameter, totalMarksParameter, passingMarksParameter, questionsParameter);
        }
    
        public virtual ObjectResult<sp_GetQuestionByPaperID_Result> sp_GetQuestionByPaperID(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestionByPaperID_Result>("sp_GetQuestionByPaperID", paperIdParameter);
        }
    
        public virtual ObjectResult<sp_GetPaperList_Result> sp_GetPaperList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPaperList_Result>("sp_GetPaperList");
        }
    
        public virtual ObjectResult<sp_GetPaperByPrimaryKey_Result> sp_GetPaperByPrimaryKey(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPaperByPrimaryKey_Result>("sp_GetPaperByPrimaryKey", paperIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> sp_PaperCompareTime(Nullable<long> paperId, Nullable<System.TimeSpan> time)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("sp_PaperCompareTime", paperIdParameter, timeParameter);
        }
    
        public virtual ObjectResult<string> sp_GetQueByPaperID(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetQueByPaperID", paperIdParameter);
        }
    
        public virtual int sp_InsertTestConduct(string userName, Nullable<int> age, Nullable<System.DateTime> conductDateTime, Nullable<long> paperId, string questionAns)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var conductDateTimeParameter = conductDateTime.HasValue ?
                new ObjectParameter("conductDateTime", conductDateTime) :
                new ObjectParameter("conductDateTime", typeof(System.DateTime));
    
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            var questionAnsParameter = questionAns != null ?
                new ObjectParameter("questionAns", questionAns) :
                new ObjectParameter("questionAns", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTestConduct", userNameParameter, ageParameter, conductDateTimeParameter, paperIdParameter, questionAnsParameter);
        }
    
        public virtual int sp_InsertUpdateQuestion(Nullable<long> queId, string title, string details, Nullable<bool> isMultiChoice, string options)
        {
            var queIdParameter = queId.HasValue ?
                new ObjectParameter("queId", queId) :
                new ObjectParameter("queId", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("details", details) :
                new ObjectParameter("details", typeof(string));
    
            var isMultiChoiceParameter = isMultiChoice.HasValue ?
                new ObjectParameter("isMultiChoice", isMultiChoice) :
                new ObjectParameter("isMultiChoice", typeof(bool));
    
            var optionsParameter = options != null ?
                new ObjectParameter("options", options) :
                new ObjectParameter("options", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateQuestion", queIdParameter, titleParameter, detailsParameter, isMultiChoiceParameter, optionsParameter);
        }
    
        public virtual ObjectResult<sp_ResultReport_Result> sp_ResultReport(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ResultReport_Result>("sp_ResultReport", paperIdParameter);
        }
    
        public virtual ObjectResult<string> sp_TestSolution(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_TestSolution", paperIdParameter);
        }
    
        [DbFunction("OnlineExamEntities", "SplitString")]
        public virtual IQueryable<Nullable<long>> SplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<long>>("[OnlineExamEntities].[SplitString](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<sp_StudentTestSolution2_Result> sp_StudentTestSolution2(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StudentTestSolution2_Result>("sp_StudentTestSolution2", paperIdParameter);
        }
    
        public virtual ObjectResult<string> sp_StudentTestSolution(Nullable<long> paperId)
        {
            var paperIdParameter = paperId.HasValue ?
                new ObjectParameter("paperId", paperId) :
                new ObjectParameter("paperId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_StudentTestSolution", paperIdParameter);
        }
    
        public virtual ObjectResult<sp_PaperListByDate_Result> sp_PaperListByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaperListByDate_Result>("sp_PaperListByDate", dateParameter);
        }
    
        public virtual ObjectResult<Sp_GetWholeFeeStructureByPK_Result> Sp_GetWholeFeeStructureByPK(Nullable<long> feeStructureId)
        {
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("feeStructureId", feeStructureId) :
                new ObjectParameter("feeStructureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetWholeFeeStructureByPK_Result>("Sp_GetWholeFeeStructureByPK", feeStructureIdParameter);
        }
    
        public virtual int Sp_InsertUpdateFeeStructure(Nullable<long> feeStructureId, string structureName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string feeStructureHead)
        {
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("feeStructureId", feeStructureId) :
                new ObjectParameter("feeStructureId", typeof(long));
    
            var structureNameParameter = structureName != null ?
                new ObjectParameter("structureName", structureName) :
                new ObjectParameter("structureName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var feeStructureHeadParameter = feeStructureHead != null ?
                new ObjectParameter("feeStructureHead", feeStructureHead) :
                new ObjectParameter("feeStructureHead", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateFeeStructure", feeStructureIdParameter, structureNameParameter, startDateParameter, endDateParameter, feeStructureHeadParameter);
        }
    
        public virtual int Sp_InsertUpdateStudentFeeSchedule(string studentFeeSchedule)
        {
            var studentFeeScheduleParameter = studentFeeSchedule != null ?
                new ObjectParameter("studentFeeSchedule", studentFeeSchedule) :
                new ObjectParameter("studentFeeSchedule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateStudentFeeSchedule", studentFeeScheduleParameter);
        }
    
        public virtual int Sp_InsertUpdateStudentFeeCollection(Nullable<long> studentId, Nullable<long> feeStructureId, Nullable<long> feeScheduleId, Nullable<System.DateTime> paidDate, string studentFeeCollection)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(long));
    
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("feeStructureId", feeStructureId) :
                new ObjectParameter("feeStructureId", typeof(long));
    
            var feeScheduleIdParameter = feeScheduleId.HasValue ?
                new ObjectParameter("feeScheduleId", feeScheduleId) :
                new ObjectParameter("feeScheduleId", typeof(long));
    
            var paidDateParameter = paidDate.HasValue ?
                new ObjectParameter("paidDate", paidDate) :
                new ObjectParameter("paidDate", typeof(System.DateTime));
    
            var studentFeeCollectionParameter = studentFeeCollection != null ?
                new ObjectParameter("studentFeeCollection", studentFeeCollection) :
                new ObjectParameter("studentFeeCollection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertUpdateStudentFeeCollection", studentIdParameter, feeStructureIdParameter, feeScheduleIdParameter, paidDateParameter, studentFeeCollectionParameter);
        }
    
        public virtual ObjectResult<Sp_GetStudentFeeCollectionByStudent_Result> Sp_GetStudentFeeCollectionByStudent(Nullable<long> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStudentFeeCollectionByStudent_Result>("Sp_GetStudentFeeCollectionByStudent", studentIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetStudentFeeScheduleByFeeStructureID_Result> Sp_GetStudentFeeScheduleByFeeStructureID(Nullable<long> feeStructureId)
        {
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("feeStructureId", feeStructureId) :
                new ObjectParameter("feeStructureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStudentFeeScheduleByFeeStructureID_Result>("Sp_GetStudentFeeScheduleByFeeStructureID", feeStructureIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetStudentFeeCollectionByFeeStructure_Result> Sp_GetStudentFeeCollectionByFeeStructure(Nullable<long> studentId, Nullable<long> feeStructureId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(long));
    
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("feeStructureId", feeStructureId) :
                new ObjectParameter("feeStructureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStudentFeeCollectionByFeeStructure_Result>("Sp_GetStudentFeeCollectionByFeeStructure", studentIdParameter, feeStructureIdParameter);
        }
    
        public virtual int Sp_Report_Student_FeeCollection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Report_Student_FeeCollection");
        }
    }
}
